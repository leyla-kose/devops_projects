{
  "version": 4,
  "terraform_version": "1.1.7",
  "serial": 13,
  "lineage": "3ab8e39b-dc22-089c-37d2-0da10fec5a51",
  "outputs": {
    "website": {
      "value": "http://ec2-35-153-49-123.compute-1.amazonaws.com",
      "type": "string"
    }
  },
  "resources": [
    {
      "mode": "managed",
      "type": "aws_instance",
      "name": "tf-docker-ec2",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "ami": "ami-0f9fc25dd2506cf6d",
            "arn": "arn:aws:ec2:us-east-1:350604422520:instance/i-02121acf2af19f66f",
            "associate_public_ip_address": true,
            "availability_zone": "us-east-1d",
            "capacity_reservation_specification": [
              {
                "capacity_reservation_preference": "open",
                "capacity_reservation_target": []
              }
            ],
            "cpu_core_count": 1,
            "cpu_threads_per_core": 1,
            "credit_specification": [
              {
                "cpu_credits": "standard"
              }
            ],
            "disable_api_termination": false,
            "ebs_block_device": [],
            "ebs_optimized": false,
            "enclave_options": [
              {
                "enabled": false
              }
            ],
            "ephemeral_block_device": [],
            "get_password_data": false,
            "hibernation": false,
            "host_id": null,
            "iam_instance_profile": "",
            "id": "i-02121acf2af19f66f",
            "instance_initiated_shutdown_behavior": "stop",
            "instance_state": "running",
            "instance_type": "t2.micro",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "firstkey",
            "launch_template": [],
            "metadata_options": [
              {
                "http_endpoint": "enabled",
                "http_put_response_hop_limit": 1,
                "http_tokens": "optional",
                "instance_metadata_tags": "disabled"
              }
            ],
            "monitoring": false,
            "network_interface": [],
            "outpost_arn": "",
            "password_data": "",
            "placement_group": "",
            "placement_partition_number": null,
            "primary_network_interface_id": "eni-01f57f578d725af12",
            "private_dns": "ip-172-31-3-232.ec2.internal",
            "private_ip": "172.31.3.232",
            "public_dns": "ec2-35-153-49-123.compute-1.amazonaws.com",
            "public_ip": "35.153.49.123",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/xvda",
                "encrypted": false,
                "iops": 100,
                "kms_key_id": "",
                "tags": {},
                "throughput": 0,
                "volume_id": "vol-0b4f157f681e5d3fb",
                "volume_size": 8,
                "volume_type": "gp2"
              }
            ],
            "secondary_private_ips": [],
            "security_groups": [
              "docker-sec-gr"
            ],
            "source_dest_check": true,
            "subnet_id": "subnet-0725e568b6bbb0e99",
            "tags": {
              "Name": "Web Server of Bookstore"
            },
            "tags_all": {
              "Name": "Web Server of Bookstore"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": "0abd3f6ad31e772c1400f65df390374a692f0658",
            "user_data_base64": null,
            "user_data_replace_on_change": false,
            "volume_tags": null,
            "vpc_security_group_ids": [
              "sg-0376818db1ea110cf"
            ]
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwidXBkYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "github_repository.myrepo",
            "github_repository_file.app-files"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group",
      "name": "tf-docker-sec-gr-203",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:350604422520:security-group/sg-0376818db1ea110cf",
            "description": "Managed by Terraform",
            "egress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 0,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "-1",
                "security_groups": [],
                "self": false,
                "to_port": 0
              }
            ],
            "id": "sg-0376818db1ea110cf",
            "ingress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 22,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 22
              },
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 80,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 80
              }
            ],
            "name": "docker-sec-gr",
            "name_prefix": "",
            "owner_id": "350604422520",
            "revoke_rules_on_delete": false,
            "tags": {
              "Name": "docker-sec-gr-203"
            },
            "tags_all": {
              "Name": "docker-sec-gr-203"
            },
            "timeouts": null,
            "vpc_id": "vpc-0f7f593c6c1133f5f"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6OTAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "github_branch_default",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/integrations/github\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "branch": "main",
            "id": "bookstore-repo",
            "repository": "bookstore-repo"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "github_repository.myrepo"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "github_repository",
      "name": "myrepo",
      "provider": "provider[\"registry.terraform.io/integrations/github\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "allow_auto_merge": false,
            "allow_merge_commit": true,
            "allow_rebase_merge": true,
            "allow_squash_merge": true,
            "archive_on_destroy": null,
            "archived": false,
            "auto_init": true,
            "branches": [
              {
                "name": "main",
                "protected": false
              }
            ],
            "default_branch": "main",
            "delete_branch_on_merge": false,
            "description": "",
            "etag": "W/\"ec570d0298f07669581afd8925fdd0823a13c2662707ac24fe1b3283ce581a5e\"",
            "full_name": "leyla-kose/bookstore-repo",
            "git_clone_url": "git://github.com/leyla-kose/bookstore-repo.git",
            "gitignore_template": null,
            "has_downloads": false,
            "has_issues": false,
            "has_projects": false,
            "has_wiki": false,
            "homepage_url": "",
            "html_url": "https://github.com/leyla-kose/bookstore-repo",
            "http_clone_url": "https://github.com/leyla-kose/bookstore-repo.git",
            "id": "bookstore-repo",
            "ignore_vulnerability_alerts_during_read": null,
            "is_template": false,
            "license_template": null,
            "name": "bookstore-repo",
            "node_id": "R_kgDOHOpdbA",
            "pages": [],
            "private": true,
            "repo_id": 485121388,
            "ssh_clone_url": "git@github.com:leyla-kose/bookstore-repo.git",
            "svn_url": "https://github.com/leyla-kose/bookstore-repo",
            "template": [],
            "topics": [],
            "visibility": "private",
            "vulnerability_alerts": false
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "github_repository_file",
      "name": "app-files",
      "provider": "provider[\"registry.terraform.io/integrations/github\"]",
      "instances": [
        {
          "index_key": "Dockerfile",
          "schema_version": 0,
          "attributes": {
            "branch": "main",
            "commit_author": "Leyla Kose",
            "commit_email": "90427098+leyla-kose@users.noreply.github.com",
            "commit_message": "managed by terraform",
            "commit_sha": "d0d11d6f895b08756777df4862fc898e368c8239",
            "content": "FROM python:alpine\nCOPY . /app\nWORKDIR /app\nRUN pip install -r requirements.txt\nEXPOSE 80\nCMD python ./app.py",
            "file": "Dockerfile",
            "id": "bookstore-repo/Dockerfile",
            "overwrite_on_create": true,
            "repository": "bookstore-repo",
            "sha": "b3eacfd968c0129a080dbb69d8de0248c5e7eb55"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "github_repository.myrepo"
          ]
        },
        {
          "index_key": "bookstore-api.py",
          "schema_version": 0,
          "attributes": {
            "branch": "main",
            "commit_author": "Leyla Kose",
            "commit_email": "90427098+leyla-kose@users.noreply.github.com",
            "commit_message": "managed by terraform",
            "commit_sha": "267d71185c2b9c46ad92733c3417e4e9598605ff",
            "content": "# Import Flask modules\nfrom flask import Flask, jsonify, abort, request, make_response\nfrom flaskext.mysql import MySQL\n\n# Create an object named app \napp = Flask(__name__)\n\n# Configure sqlite database\napp.config['MYSQL_DATABASE_HOST'] = 'database'\napp.config['MYSQL_DATABASE_USER'] = 'clarusway'\napp.config['MYSQL_DATABASE_PASSWORD'] = 'Clarusway_1'\napp.config['MYSQL_DATABASE_DB'] = 'bookstore_db'\napp.config['MYSQL_DATABASE_PORT'] = 3306\nmysql = MySQL()\nmysql.init_app(app)\nconnection = mysql.connect()\nconnection.autocommit(True)\ncursor = connection.cursor()\n\n# Write a function named `init_bookstore_db` which initilazes the bookstore db\n# Create books table within sqlite db and populate with sample data\n# Execute the code below only once.\ndef init_bookstore_db():\n    drop_table = 'DROP TABLE IF EXISTS bookstore_db.books;'\n    books_table = \"\"\"\n    CREATE TABLE bookstore_db.books(\n    book_id INT NOT NULL AUTO_INCREMENT,\n    title VARCHAR(100) NOT NULL,\n    author VARCHAR(100),\n    is_sold BOOLEAN NOT NULL DEFAULT 0,\n    PRIMARY KEY (book_id)\n    )ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n    \"\"\"\n    data = \"\"\"\n    INSERT INTO bookstore_db.books (title, author, is_sold)\n    VALUES\n        (\"Where the Crawdads Sing\", \"Delia Owens\", 1 ),\n        (\"The Vanishing Half: A Novel\", \"Brit Bennett\", 0),\n        (\"1st Case\", \"James Patterson, Chris Tebbetts\", 0);\n    \"\"\"\n    cursor.execute(drop_table)\n    cursor.execute(books_table)\n    cursor.execute(data)\n\n# Write a function named `get_all_books` which gets all books from the books table in the db,\n# and return result as list of dictionary\n# `[{'book_id': 1, 'title':'XXXX', 'author': 'XXXXXX', 'is_sold': 'Yes' or 'No'} ]`.\ndef get_all_books():\n    query = \"\"\"\n    SELECT * FROM books;\n    \"\"\"\n    cursor.execute(query)\n    result = cursor.fetchall()\n    books =[{'book_id':row[0], 'title':row[1], 'author':row[2], 'is_sold': bool(row[3])} for row in result]\n    return books\n\n# Write a function named `find_book` which finds book using book_id from the books table in the db,\n# and return result as list of dictionary\n# `[{'book_id': 1, 'title':'XXXX', 'author': 'XXXXXX', 'is_sold': 'Yes' or 'No'} ]`.\ndef find_book(id):\n    query = f\"\"\"\n    SELECT * FROM books WHERE book_id={id};\n    \"\"\"\n    cursor.execute(query)\n    row = cursor.fetchone()\n    book = None\n    if row is not None:\n        book = {'book_id':row[0], 'title':row[1], 'author':row[2], 'is_sold': bool(row[3])}\n    return book\n\n\n# Write a function named `insert_book` which inserts book into the books table in the db,\n# and return the newly added book as dictionary\n# `[{'book_id': 1, 'title':'XXXX', 'author': 'XXXXXX', 'is_sold': 'Yes' or 'No'} ]`.\ndef insert_book(title, author):\n    insert = f\"\"\"\n    INSERT INTO books (title, author)\n    VALUES ('{title}', '{author}');\n    \"\"\"\n    cursor.execute(insert)\n\n    query = f\"\"\"\n    SELECT * FROM books WHERE book_id={cursor.lastrowid};\n    \"\"\"\n    cursor.execute(query)\n    row = cursor.fetchone()\n\n    return {'book_id':row[0], 'title':row[1], 'author':row[2], 'is_sold': bool(row[3])}\n\n# Write a function named `change_book` which updates book into the books table in the db,\n# and return updated added book as dictionary\n# `[{'book_id': 1, 'title':'XXXX', 'author': 'XXXXXX', 'is_sold': 'Yes' or 'No'} ]`.\ndef change_book(book):\n    update = f\"\"\"\n    UPDATE books\n    SET title='{book['title']}', author = '{book['author']}', is_sold = {book['is_sold']}\n    WHERE book_id= {book['book_id']};\n    \"\"\"\n    cursor.execute(update)\n\n    query = f\"\"\"\n    SELECT * FROM books WHERE book_id={book['book_id']};\n    \"\"\"\n    cursor.execute(query)\n    row = cursor.fetchone()\n    return {'book_id':row[0], 'title':row[1], 'author':row[2], 'is_sold': bool(row[3])}\n\n# Write a function named `remove_book` which removes book from the books table in the db,\n# and returns True if successfully deleted or False.\ndef remove_book(book):\n    delete = f\"\"\"\n    DELETE FROM books\n    WHERE book_id= {book['book_id']};\n    \"\"\"\n    cursor.execute(delete)\n\n    query = f\"\"\"\n    SELECT * FROM books WHERE book_id={book['book_id']};\n    \"\"\"\n    cursor.execute(query)\n    row = cursor.fetchone()\n    return True if row is None else False\n\n\n# Write a function named `home` which returns 'Welcome to the Callahan's Bookstore API Service',\n# and assign to the static route of ('/')\n@app.route('/')\ndef home():\n    return \"Welcome to Leyla's Bookstore API Service\"\n\n# Write a function named `get_books` which returns all books in JSON format for `GET`,\n# and assign to the static route of ('/books')\n@app.route('/books', methods=['GET'])\ndef get_books():\n    return jsonify({'books':get_all_books()})\n\n\n# Write a function named `get_books` which returns the book with given book_id in JSON format for `GET`,\n# and assign to the static route of ('/books/\u003cint:book_id\u003e')\n@app.route('/books/\u003cint:book_id\u003e', methods = ['GET'])\ndef get_book(book_id):\n    book = find_book(book_id)\n    if book == None:\n        abort(404)\n    return jsonify({'book found': book})\n\n# Write a function named `add_book` which adds new book using `POST` methods,\n# and assign to the static route of ('/books')\n@app.route('/books', methods=['POST'])\ndef add_book():\n    if not request.json or not 'title' in request.json:\n        abort(400)\n    return jsonify({'newly added book':insert_book(request.json['title'], request.json.get('author', ''))}), 201\n\n# Write a function named `update_book` which updates an existing book using `PUT` method,\n# and assign to the static route of ('/books/\u003cint:book_id\u003e')\n@app.route('/books/\u003cint:book_id\u003e', methods=['PUT'])\ndef update_book(book_id):\n    book = find_book(book_id)\n    if book == None:\n        abort(404)\n    if not request.json:\n        abort(400)\n    book['title'] = request.json.get('title', book['title'])\n    book['author'] = request.json.get('author', book['author'])\n    book['is_sold'] = int(request.json.get('is_sold', int(book['is_sold'])))\n    return jsonify({'updated book': change_book(book)})\n\n# Write a function named `delete_book` which updates an existing book using `DELETE` method,\n# and assign to the static route of ('/books/\u003cint:book_id\u003e')\n@app.route('/books/\u003cint:book_id\u003e', methods=['DELETE'])\ndef delete_book(book_id):\n    book = find_book(book_id)\n    if book == None:\n        abort(404)\n    return jsonify({'result':remove_book(book)})\n\n# Write a function named `not_found` for handling 404 errors which returns 'Not found' in JSON format.\n@app.errorhandler(404)\ndef not_found(error):\n    return make_response(jsonify({'error': 'Not found'}), 404)\n\n# Write a function named `bad_request` for handling 400 errors which returns 'Bad Request' in JSON format.\n@app.errorhandler(400)\ndef bad_request(error):\n    return make_response(jsonify({'error': 'Bad request'}), 400)\n\n\n# Add a statement to run the Flask application which can be reached from any host on port 80.\nif __name__== '__main__':\n    init_bookstore_db()\n    app.run(host='0.0.0.0', port=80)",
            "file": "bookstore-api.py",
            "id": "bookstore-repo/bookstore-api.py",
            "overwrite_on_create": true,
            "repository": "bookstore-repo",
            "sha": "011e608954b2ea06756c54b208f5f64ee5f0e5be"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "github_repository.myrepo"
          ]
        },
        {
          "index_key": "docker-compose.yml",
          "schema_version": 0,
          "attributes": {
            "branch": "main",
            "commit_author": "Leyla Kose",
            "commit_email": "90427098+leyla-kose@users.noreply.github.com",
            "commit_message": "managed by terraform",
            "commit_sha": "b893a4a8cc777265cc4cf3832482a4e14a6f8bfc",
            "content": "version: \"3.7\"\n\nservices:\n    database:\n        image: mysql:5.7\n        container_name: database\n        environment:\n            MYSQL_ROOT_PASSWORD: Clarusway_1\n            MYSQL_DATABASE: bookstore_db\n            MYSQL_USER: clarusway\n            MYSQL_PASSWORD: Clarusway_1\n        networks:\n            - clarusnet\n    myapp:\n        image: leylakose/bookstoreapi:latest\n        container_name: myapp\n        restart: always\n        depends_on:\n            - database\n        ports:\n            - \"80:80\"\n        networks:\n            - clarusnet\n\nnetworks:\n    clarusnet:\n        driver: bridge\n",
            "file": "docker-compose.yml",
            "id": "bookstore-repo/docker-compose.yml",
            "overwrite_on_create": true,
            "repository": "bookstore-repo",
            "sha": "f47ad4fa59890524d9d95f080579086e6dc55037"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "github_repository.myrepo"
          ]
        },
        {
          "index_key": "requirements.txt",
          "schema_version": 0,
          "attributes": {
            "branch": "main",
            "commit_author": "Leyla Kose",
            "commit_email": "90427098+leyla-kose@users.noreply.github.com",
            "commit_message": "managed by terraform",
            "commit_sha": "9219431b1a82d4dddd3b0caec2ce77a31cbad161",
            "content": "flask\nflask-mysql",
            "file": "requirements.txt",
            "id": "bookstore-repo/requirements.txt",
            "overwrite_on_create": true,
            "repository": "bookstore-repo",
            "sha": "e7a444cb09a82b526987c2edb129559d3a2ea0c5"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "github_repository.myrepo"
          ]
        }
      ]
    }
  ]
}
